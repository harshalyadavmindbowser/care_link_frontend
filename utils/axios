// import { createContext, useEffect, useReducer, useCallback, useMemo } from
// 'react';
// // utils
// import axios from '../utils/axios';
// import localStorageAvailable from '../utils/localStorageAvailable';
// //
// import { isValidToken, setSession } from './utils';
// import { ActionMapType, AuthStateType, AuthUserType, JWTContextType } from
// './types';
// // ----------------------------------------------------------------------
// // NOTE:
// // We only build demo at basic level.
// // Customer will need to do some extra handling yourself if you want to
// extend the logic and other features...
// // ----------------------------------------------------------------------
// enum Types {
// INITIAL = 'INITIAL',
// LOGIN = 'LOGIN',
// REGISTER = 'REGISTER',
// LOGOUT = 'LOGOUT',
// }
// type Payload = {
// [Types.INITIAL]: {
// isAuthenticated: boolean;
// user: AuthUserType;
// };
// [Types.LOGIN]: {
// user: AuthUserType;
// };
// [Types.REGISTER]: {
// user: AuthUserType;
// };
// [Types.LOGOUT]: undefined;
// };

// type ActionsType = ActionMapType<Payload>[keyof ActionMapType<Payload>];
// // ----------------------------------------------------------------------
// const initialState: AuthStateType = {
// isInitialized: false,
// isAuthenticated: false,
// user: null,
// };
// const reducer = (state: AuthStateType, action: ActionsType) => {
// if (action.type === Types.INITIAL) {
// return {
// isInitialized: true,
// isAuthenticated: action.payload.isAuthenticated,
// user: action.payload.user,
// };
// }
// if (action.type === Types.LOGIN) {
// return {
// ...state,
// isAuthenticated: true,
// user: action.payload.user,
// };
// }
// if (action.type === Types.REGISTER) {
// return {
// ...state,
// isAuthenticated: true,
// user: action.payload.user,
// };
// }
// if (action.type === Types.LOGOUT) {
// return {
// ...state,
// isAuthenticated: false,
// user: null,
// };
// }
// return state;

// };
// // ----------------------------------------------------------------------
// export const AuthContext = createContext<JWTContextType | null>(null);
// // ----------------------------------------------------------------------
// type AuthProviderProps = {
// children: React.ReactNode;
// };
// export function AuthProvider({ children }: AuthProviderProps) {
// const [state, dispatch] = useReducer(reducer, initialState);
// const storageAvailable = localStorageAvailable();
// const initialize = useCallback(async () => {
// try {
// const accessToken = storageAvailable ?
// localStorage.getItem('accessToken') : '';
// if (accessToken && isValidToken(accessToken)) {
// setSession(accessToken);
// const response = await axios.get('/api/account/my-account');
// const { user } = response.data;
// dispatch({
// type: Types.INITIAL,
// payload: {
// isAuthenticated: true,
// user,
// },
// });
// } else {
// dispatch({
// type: Types.INITIAL,
// payload: {

// isAuthenticated: false,
// user: null,
// },
// });
// }
// } catch (error) {
// console.error(error);
// dispatch({
// type: Types.INITIAL,
// payload: {
// isAuthenticated: false,
// user: null,
// },
// });
// }
// }, [storageAvailable]);
// useEffect(() => {
// initialize();
// }, [initialize]);
// // LOGIN
// const login = useCallback(async (email: string, password: string) => {
// const response = await axios.post('/api/account/login', {
// email,
// password,
// });
// const { accessToken, user } = response.data;
// setSession(accessToken);
// dispatch({
// type: Types.LOGIN,
// payload: {
// user,
// },
// });
// }, []);
// // REGISTER

// const register = useCallback(
// async (email: string, password: string, firstName: string, lastName:
// string) => {
// const response = await axios.post('/api/account/register', {
// email,
// password,
// firstName,
// lastName,
// });
// const { accessToken, user } = response.data;
// localStorage.setItem('accessToken', accessToken);
// dispatch({
// type: Types.REGISTER,
// payload: {
// user,
// },
// });
// },
// []
// );
// // LOGOUT
// const logout = useCallback(() => {
// setSession(null);
// dispatch({
// type: Types.LOGOUT,
// });
// }, []);
// const memoizedValue = useMemo(
// () => ({
// isInitialized: state.isInitialized,
// isAuthenticated: state.isAuthenticated,
// user: state.user,
// method: 'jwt',
// login,
// loginWithGoogle: () => {},
// loginWithGithub: () => {},

// loginWithTwitter: () => {},
// register,
// logout,
// }),
// [state.isAuthenticated, state.isInitialized, state.user, login,
// logout, register]
// );
// return <AuthContext.Provider
// value={memoizedValue}>{children}</AuthContext.Provider>;
// }



import React, { createContext, useContext, useReducer, ReactNode } from 'react';
interface User {
username: string;
token: string;
}
interface AuthState {
user: User | null;
loading: boolean;
error: string | null;
}
type Action =
| { type: 'LOGIN_START' }
| { type: 'LOGIN_SUCCESS'; payload: User }
| { type: 'LOGIN_FAILURE'; payload: string }
| { type: 'LOGOUT' };
const initialState: AuthState = {
user: null,
loading: false,
error: null,
};
function authReducer(state: AuthState, action: Action): AuthState {
switch (action.type) {
case 'LOGIN_START':
return { ...state, loading: true, error: null };
case 'LOGIN_SUCCESS':
return { user: action.payload, loading: false, error: null };
case 'LOGIN_FAILURE':
return { user: null, loading: false, error: action.payload };
case 'LOGOUT':
return { user: null, loading: false, error: null };
default:
return state;
}
}
interface AuthContextProps extends AuthState {
login: (username: string, password: string) => Promise<void>;
logout: () => void;
}

const AuthContext = createContext<AuthContextProps | undefined>(undefined);
export const AuthProvider = ({ children }: { children: ReactNode }) => {
const [state, dispatch] = useReducer(authReducer, initialState);
const login = async (username: string, password: string) => {
dispatch({ type: 'LOGIN_START' });
try {
// Simulated API call
const res = await fetch('/api/login', {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ username, password }),
});
if (!res.ok) {
throw new Error('Invalid credentials');
}
const data: User = await res.json();
dispatch({ type: 'LOGIN_SUCCESS', payload: data });
} catch (error: any) {
dispatch({ type: 'LOGIN_FAILURE', payload: error.message });
}
};
const logout = () => dispatch({ type: 'LOGOUT' });
return (
<AuthContext.Provider value={{ ...state, login, logout }}>
{children}
</AuthContext.Provider>
);
};
export const useAuth = (): AuthContextProps => {
const context = useContext(AuthContext);
if (!context) {
throw new Error('useAuth must be used within an AuthProvider');
}
return context;
};